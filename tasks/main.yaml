- name: Gather facts
  block:
  - stat:
      path: "{{ [eng_repo_base_dir, item.dest | default (item.repo | regex_replace('^(?:.+/)?([^/]+)$', '\\1'))] | join('/') | realpath }}"
    register: eng_repo_base_dir_stat
    loop: |
      {{ eng_repos_to_clone }}
    async: 60
    poll: 0

  - async_status:
      jid: "{{ item.ansible_job_id }}"
    loop: "{{ eng_repo_base_dir_stat.results }}"
    register: eng_repo_base_dir_stat
    until: eng_repo_base_dir_stat.finished
    retries: 60
    delay: 10
    when: eng_repo_base_dir_stat is defined
  
  - set_fact:
      eng_repos_resolved: |
        {{ 
          eng_repo_base_dir_stat
          | json_query('results[*].{"path": invocation.module_args.path, "repo": item.item.repo, "exists": stat.exists && stat.isdir}')
        }}

- name: Create parent directories
  file:
    path: "{{ item }}"
    state: directory
    mode: 0755
  loop: |
    {{ eng_repos_resolved | map(attribute='path') | map('dirname') | unique }}

- name: Clone repository
  git:
    repo: "{{ item.repo }}"
    dest: "{{ item.path }}"
    remote: "{{ item.remote | default(eng_repos_default_remote_name) }}"
  loop: "{{ eng_repos_resolved }}"
  loop_control:
    label: "{{ item.repo }}"
  when: item.exists == false
  async: 60
  poll: 0
  register: git_clone_async_results

- name: Wait for git clone to complete
  async_status:
    jid: "{{ item.ansible_job_id }}"
  loop: "{{ git_clone_async_results.results }}"
  register: git_clone_async_status_results
  until: git_clone_async_status_results.finished
  retries: 60
  delay: 10
  when: git_clone_async_status_results is defined
